#!/bin/sh
GENOMES=$HOME/.local/share/.riceboxes
SELECTED_GENOME=
AUR_MANAGER=trizen
EC_RED='\033[0;31m'
EC_YELLOW='\033[0;33m'
EC_GREEN='\033[0;32m'
EC_BLUE='\033[0;34m'
EC_NC='\033[0m'
#Print color codes
BB_C=$EC_RED
UU_C=$EC_YELLOW
US_C=$EC_RED
VU_C=$EC_GREEN
VS_C=$EC_BLUE


#Self explanatory
check_internet(){
	if [ "$(ping -c 3 archlinux.org 2>&1 | tail -n 1 | grep rtt)" == "" ]; then
		echo false
	else
		echo true
	fi
}

#IF $1 is provided, copies selected_genome to $1 otherwise it copies it to the name_<RANDOM>
clone_genome(){
	if [ "$1" == "" ];then
		name=$SELECTED_GENOME"_"$RANDOM
		if [ ! -d "$GENOMES/$name" ];then
			cp -r $GENOMES/$SELECTED_GENOME $GENOMES/$name
		else
			while [ ! -d "$GENOMES/$name" ];do
				name=$SELECTED_GENOME"_"$RANDOM
			done
			cp -r $GENOMES/$SELECTED_GENOME $GENOMES/$name
		fi
		echo $SELECTED_GENOME cloned as $name
	else
		if [ ! -d "$GENOMES/$1" ];then
			cp -r $GENOMES/$SELECTED_GENOME $GENOMES/$1
		else
			echo Error: $1 already exists
		fi
		echo $SELECTED_GENOME cloned as $1
	fi
}

#Self explanatory: selects genome to be manipulated
select_genome(){
	if [ "$1" == "-" ];then
		ls -1 $GENOMES | grep -v MATRIX
		read -p "Name of the genome to select?: " a
	elif [ ! "$1" == "NONE" ];then
		a=$1
	else
		a=
	fi
	[ -d "$GENOMES/$a" ] && sed -i 's/^SELECTED_GENOME=.*$/SELECTED_GENOME='$a'/' `dirname $2`/rw && export SELECTED_GENOME="$a"
}

#Self explanatory
set_aur(){
	if [ "$1" == "" ];then
		read -p "Name of the AUR manager to use?: " a
	else 
		a=$1
	fi
	sed -i 's/^AUR_MANAGER=.*$/AUR_MANAGER='$a'/' $HOME/.local/share/bin/rw
}

#Create (and sets to ) a new genome. if no $1 is provided you will prompted for a name 
create_new_genome(){
	if [ "$1" == "-" ];then
		read -p "Name of the new genome?: " a
		
	else
		a=$1
	fi
	mkdir $GENOMES/$a
	touch $GENOMES/$a/LinkMap
	select_genome $a $2
}

#self explanatory
delete_genome(){
	if [ "$1" == "-" ];then
		ls -1 $GENOMES | grep -v MATRIX
		read -p "Name of the genome to delete?: " a
	else 
		a=$1
	fi
	rm -rf $GENOMES/$a
	select_genome $a $2
}

#print currently available genomes in the genomes folder. Selected genome will be prepended with a star
print_genome(){
	while read -r a;do
		genome=`echo $a | sed 's,^.*/\(.*\)$,\1,'`
		gs=`validate_genome $genome`
		lh="$(echo $gs | sed 's/\(.\)./\1/')"
		su="$(echo $gs | sed 's/.\(.\)/\1/')"
		if [ "$gs" == "BB" ];then
			echo -ne $BB_C
		elif [ "$gs" == "US" ];then
			echo -ne $US_C
		elif [ "$gs" == "UU" ];then
			echo -ne $UU_C
		elif [ "$gs" == "VU" ];then
			echo -ne $VU_C
		elif [ "$gs" == "VS" ];then
			echo -ne $VS_C
		fi
		if [ "$genome" == "$SELECTED_GENOME" ]; then
			echo -n "* " 
		fi
		if [ "$su" == "S" ];then
			echo -n "{ "$genome" }"
		else
			echo -n $genome
		fi
		if [ "$lh" == "U" ];then
			echo -n " (UNLINKED)"
		elif [ "$lh" == "B" ] && [ ! "$gs" == "BB" ];then
			echo -n " (BROKEN)"
		elif [ "$gs" == "BB" ];then
			echo -n " (??????)"
		fi
		echo -e $EC_NC
	done <<< $(find $GENOMES -maxdepth 1 -type d | tail -n +2)
}

#list the selected genome's genes
#if "i" is provided as $1, print each genes' details
#if "m" is provided as $1, print only the genes and genome link Map
#if no $1 is provided (or isnt i or m), print only genes, nothing else
list_genes(){
	if [ "$1" == "m" ];then
		echo -e $EC_RED"###$SELECTED_GENOME GENES###"$EC_NC
		while read -r a;do
			if [ -f "$a/ExecMap" ];then
				echo -e $EC_YELLOW"$(echo $a | sed 's,^.*/\(.*\)$,\1,;s/;[apn]//g')"$EC_BLUE" ( p:$(cat $a/ExecMap | grep "^p;" | wc -l) i:$(cat $a/ExecMap | grep "^i;" | wc -l) P:$(cat $a/ExecMap | grep "^P;" | wc -l) r:$(cat $a/ExecMap | grep "^r;" | wc -l) )"$EC_NC
			else
				echo -e $EC_YELLOW"$(echo $a | sed 's,^.*/\(.*\)$,\1,;s/;[apn]//g')"$EC_NC
			fi
			if [ -f "$a/FileMap" ];then
				while read -r b;do
					printf '\t'"$EC_GREEN$( echo $b | awk 'BEGIN { FS=";" } { print $3 }' | awk 'BEGIN { FS="->" } { print $2 }' )/$( echo $b | awk 'BEGIN { FS=";" } { print $3 }' | awk 'BEGIN { FS="->" } { print $1 }' )$EC_NC"'\n'
				done <<< $(cat "$a/FileMap")
			fi
			if [ -f "$a/DepMap" ];then
				while read -r b;do
					printf "$( echo $b | sed 's/;[apn]//g' )"'\n'
				done <<< $(cat "$a/DepMap")
			fi
		done <<< $( find $GENOMES/$SELECTED_GENOME/ -type d | tail -n +2 | sort)
		echo -e $EC_RED"###$SELECTED_GENOME LINKMAP###"$EC_NC
		[ ! "`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^A::" | sort`" == "" ] && echo -e $EC_BLUE"`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^A::" | sort`"$EC_NC
		[ ! "`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^R::" | sort`" == "" ] && echo -e $EC_GREEN"`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^R::" | sort`"$EC_NC
		[ ! "`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^*" | sort`" == "" ] && echo -e $EC_YELLOW"`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "^*" | sort`"$EC_NC
	elif [ "$1" == "i" ];then
		if [ "$2" == "" ];then
			while read -r a;do
				echo -n $SELECTED_GENOME" -- "
				echo $a | sed 's,^.*/\(.*\)$,\1,'
				if [ -f $a/FileMap ];then
				       	echo FileMap: 
					while read -r b;do
						printf '\t'$b'\n'
					done <<< $( cat $a/FileMap )
				fi
				if [ -f $a/DepMap ];then
				       	echo DepMap: 
					while read -r b;do
						printf '\t'$b'\n'
					done <<< $( cat $a/DepMap )
				fi
				if [ -f $a/ExecMap ];then
				       	echo ExecMap: 
					while read -r b;do
						printf '\t'"$b"'\n'
					done <<< $( cat $a/ExecMap )
				fi
				if [ -d $a/Files ];then
					echo $(ls -1 $a/Files | wc -l) Files
				fi
			done <<< $(find $GENOMES/$SELECTED_GENOME/ -type d | tail -n +2)
		else
			a=`find $GENOMES/$SELECTED_GENOME/ -type d | tail -n +2 | grep $2`
			echo -n $SELECTED_GENOME" -- "
			echo $a | sed 's,^.*/\(.*\)$,\1,'
			if [ -f $a/FileMap ];then
			       	echo FileMap: 
				while read -r b;do
					printf '\t'$b'\n'
				done <<< $( cat $a/FileMap )
			fi
			if [ -f $a/DepMap ];then
			       	echo DepMap: 
				while read -r b;do
					printf '\t'$b'\n'
				done <<< $( cat $a/DepMap )
			fi
			if [ -f $a/ExecMap ];then
			       	echo ExecMap: 
				while read -r b;do
					printf '\t'"$b"'\n'
				done <<< $( cat $a/ExecMap )
			fi
			if [ -d $a/Files ];then
				echo $(ls -1 $a/Files | wc -l) Files
			fi
		fi
	else
		find $GENOMES/$SELECTED_GENOME/ -type d | tail -n +2 | sed 's,^.*/\(.*\)$,\1,'
	fi
}

#Grabs the <package name>;<A=AUR manager,P=Pacman,N=None> item name given a simple package name as $1 (used in several functions below and utilises list_genes m)
grab_full_gene(){
	while read -r b; do
		if [ "$(echo $b | sed 's/\;.$//')" == "$1" ];then
			echo $b
		fi
	done <<< $(list_genes)
}

#Given a full gene name as $1 (<package;[api]) and another SIMPLE (package) gene name as $2, returns $2's full name <package>;[apn]
grab_full_gene_dep(){
	if [ -f $GENOMES/$SELECTED_GENOME/$1/DepMap ];then
		while read -r b;do
			if [ "$(echo $b | sed 's/\;.$//')" == "$2" ];then
				echo $b
			fi
		done <<< $( cat $GENOMES/$SELECTED_GENOME/$1/DepMap )
	fi
}


#Deletes links from currently selected genome that matches the set $1 (full or simple) but ONLY if at the end of the chain
remove_link(){
	to_remove=`echo $1 | sed 's/;[apn]$//'`
	while read -r a;do
		if [ ! "$(echo $a | grep -o "^.*$to_remove;[apn]$")" == "" ];then
			sed -i '/'$a'/d' $GENOMES/$SELECTED_GENOME/LinkMap
		fi
	done <<< $(cat $GENOMES/$SELECTED_GENOME/LinkMap)	
	
}

#Deletes links from currently selected genome that matches the set $1 (full or simple) that are orphaned (unlinked,designated by a starting star)
remove_orphaned_gene_link(){
	to_remove=`echo $1 | sed 's/;[apn]$//'`
	while read -r a;do
		if [ ! "$(echo $a | grep -o "^*.*$to_remove;[apn]$")" == "" ];then
			sed -i '/'$a'/d' $GENOMES/$SELECTED_GENOME/LinkMap
		fi
	done <<< $(cat $GENOMES/$SELECTED_GENOME/LinkMap)	
	
}

#Replaces the regular '~' with the home path
parse_relpath(){
	echo $1 | sed 's,~,'$HOME','
}

#Writing a gene essentially consists of pulling relevant files from the gene's FileMap to a folder named files
write_gene(){
	while read -r b;do
		if [ "$b" == "FileMap" ];then
			echo Filemap Found
			mkdir $a/Files
			echo Files folder made
			while read -r c;do
				user_group=`echo $c | awk 'BEGIN { FS=";" } { print $1 }'`
				perms=`echo $c | awk 'BEGIN { FS=";" } { print $2 }'`
				map=`echo $c | awk 'BEGIN { FS=";" } { print $3 }'`
				file=`echo $map | awk 'BEGIN { FS="->" } { print $1 }'`
				dest=`echo $map | awk 'BEGIN { FS="->" } { print $2 }'`
				dest=`parse_relpath $dest`
				fp=$dest"/"$file
				echo $a/Files
				echo $fp
				if [ -d "$fp" ];then
					cp -ra "$fp" "$a/Files/"
				elif [ -f "$fp" ];then
					cp -a "$fp" "$a/Files/"
				else
					echo File $fp does not exists
				fi
			done <<< $(cat $a/FileMap)
		fi
	done <<< $(ls $1)
}

#Seals a genome for incubation which consists of cloning the selected genome to $1 (or NAME_DATE_TIMESTAMP or $1 isnt provided) and selecting it 
#and writting each genes
seal_genome(){
	echo $1 $2
	old_sb=$SELECTED_GENOME
	if [ "$1" == "-" ];then
		seal_full="$old_sb"
	else
		seal_full="$1"
	fi
	[ ! "$old_sb" == "$seal_full" ] && select_genome "$seal_full" $2
	
	while read -r a;do
		if [ ! "$a" == "" ];then
			write_gene $a
		fi
	done <<< $(find $GENOMES/$SELECTED_GENOME -type d )
	[ ! "$old_sb" == "$seal_full" ] && echo Sealed Rice Genome to $seal_full || echo $seal_full has been sealed!
	[ ! "$old_sb" == "$seal_full" ] && select_genome $old_sb $2
}

#Potential most complicated function in the whole file. Parse genome specific commands
parse_rice_command(){
	c=$1
	subc=`echo $2 | sed 's/^\(.\).*$/\1/'`
	subca=`echo $2 | sed 's/^.\(.*\)$/\1/'`
	if [ "$c" == "a" ];then
		if [ "$subc" == "i" ];then
			manager=`echo $subca | sed 's/^\(.\).*$/\1/'`
			install=`echo $subca | sed 's/^.\(.*\)$/\1/'`
			if [ "$manager" == "p" ];then
				if [ "$3" == "" ]; then
					read -p "Name of program to add?: " a
				else
					a=$3
				fi
				if [ "$install" == "y" ];then
					sudo pacman -S --noconfirm $a && mkdir $GENOMES/$SELECTED_GENOME/$a\;$manager && echo *$a\;$manager >> $GENOMES/$SELECTED_GENOME/LinkMap
				else
 					mkdir $GENOMES/$SELECTED_GENOME/$a\;$manager && echo *$a\;$manager && echo *$a\;$manager >> $GENOMES/$SELECTED_GENOME/LinkMap
				fi
			elif [ "$manager" == "a" ];then
				if [ "$3" == "" ]; then
					read -p "Name of program to add?: " a
				else
					a=$3
				fi
				if [ "$install" == "y" ];then
					$AUR_MANAGER --noconfirm -S $a && mkdir $GENOMES/$SELECTED_GENOME/$a\;$manager && echo *$a\;$manager >> $GENOMES/$SELECTED_GENOME/LinkMap
				else
					mkdir $GENOMES/$SELECTED_GENOME/$a\;$manager && echo *$a\;$manager >> $GENOMES/$SELECTED_GENOME/LinkMap
				fi
			elif [ "$manager" == "n" ];then
				if [ "$3" == "" ]; then
					read -p "Name of program to add?: " a
				else
					a=$3
				fi
				mkdir $GENOMES/$SELECTED_GENOME/$a\;$manager && echo *$a\;$manager >> $GENOMES/$SELECTED_GENOME/LinkMap
			fi
		elif [ "$subc" == "e" ];then
			if [ "$3" == "" ];then
				read -p "Item to add command to?: " a
				i=`grab_full_gene $a`	
			else
				i=`grab_full_gene $3`
			fi
			vim /tmp/execcmd
			t=`echo $subca | sed 's/^\(.\).*$/\1/'`
			e=`echo $subca | sed 's/^.\(.*\)$/\1/'`
			if [ -f "/tmp/execcmd" ];then
				while read -r a; do
					if [ "$t" == "p" ];then
						echo p\;$a >> $GENOMES/$SELECTED_GENOME/$i/ExecMap
					elif [ "$t" == "i" ];then
						echo i\;$a >> $GENOMES/$SELECTED_GENOME/$i/ExecMap
					elif [ "$t" == "P" ];then
						echo P\;$a >> $GENOMES/$SELECTED_GENOME/$i/ExecMap
					fi
					if [ "$e" == "y" ];then
						$a
					fi
				done <<< $(cat /tmp/execcmd)
				rm /tmp/execcmd
			fi
		elif [ "$subc" == "f" ];then
			if [ "$3" == "" ];then
				list_genes
				read -p "item to link file to: " a
				item=`grab_full_gene $a`	
			else
				item=`grab_full_gene $3`
			fi
			if [ "$4" == "" ];then
				read -p "origin filename: " b
			else
				a=$4
			fi
			if [ "$5" == "" ];then
				read -p "Destination folder: " c
			else
				b=$5
			fi
			if [ ! "$6" == "" ];then
				perm=$6
			else 
				perm=764
			fi
			if [ "$subca" == "r" ];then
				echo "root:root;$perm;$a->$b" >> $GENOMES/$SELECTED_GENOME/$item/FileMap
			elif [ "$subca" == "u" ];then
				echo "USER:USER;$perm;$a->$b" >> $GENOMES/$SELECTED_GENOME/$item/FileMap
			fi		
		elif [ "$subc" == "d" ];then
			manager=`echo $subca | sed 's/^\(.\).*$/\1/'`
			install=`echo $subca | sed 's/^.\(.*\)$/\1/'`

			if [ "$3" == "" ];then
				list_genes
				read -p "item to add dep to?: " a
				item=`grab_full_gene $a`	
			else
				item=`grab_full_gene $3`
			fi
			if [ ! "$item" == "" ];then
				if [ "$4" == "" ];then
					read -p "Name of dep?: " b
					dep="$b"
				else
					dep="$4"
				fi
				echo "$dep;$manager" >> $GENOMES/$SELECTED_GENOME/$item/DepMap
				if [ "$install" == "y" ];then
					sudo pacman --noconfirm -S $dep
				fi
			else
				[ "$a" == "" ] && echo $3 not found || echo $a not found
			fi
		fi
	elif [ "$c" == "e" ];then
		if [ "$subc" == "f" ];then
			if [ "$3" == "" ];then
				list_genes
				read -p "Which Item's FileMap do you want to edit?: " a
				item=`grab_full_gene $a`
			else
				item=`grab_full_gene $3`
			fi
			vim $GENOMES/$SELECTED_GENOME/$item/FileMap
		elif [ "$subc" == "e" ];then
			if [ "$3" == "" ];then
				list_genes
				read -p "Which Item's ExecMap do you want to edit?: " a
				item=`grab_full_gene $a`
			else
				item=`grab_full_gene $3`
			fi
			vim $GENOMES/$SELECTED_GENOME/$item/ExecMap
		elif [ "$subc" == "d" ];then
			if [ "$3" == "" ];then
				list_genes
				read -p "Which Item's DepMap do you want to edit?: " a
				item=`grab_full_gene $a`
			else
				item=`grab_full_gene $3`
			fi
			vim $GENOMES/$SELECTED_GENOME/$item/DepMap
		elif [ "$subc" == "n" ];then
			if [ "$subca" == "G" ];then
				read -p "New name for $SELECTED_GENOME?: " a
				while [ -d "$GENOMES/$a" ];do
					read -p "$a already exists: " a
				done
				mv $GENOMES/$SELECTED_GENOME $GENOMES/$a
				select_genome $a $3
			elif [ "$subca" == "g" ];then
				if [ "$3" == "" ] || [ "$(grab_full_gene $3)" == "" ];then
					list_genes | grep ";n$" | sed 's/;[apn]//'
					read -p "Which gene to rename?: " a
					item=`grab_full_gene $a`
				else
					item=`grab_full_gene $3`
				fi
				echo ITEM: $item
				m="$(echo $item | awk 'BEGIN { FS=";" } { print $2 }')"
				if [ "$4" == "" ];then
					read -p "new name: " a
					name="$a"
				else
					name="$4"
				fi
				echo NAME: $name
				mv $GENOMES/$SELECTED_GENOME/$item $GENOMES/$SELECTED_GENOME/$name';'$m
				sed -i 's/'"$( echo $item | sed 's/;[apn]//')"'/'$name'/' $GENOMES/$SELECTED_GENOME/LinkMap
			fi
		elif [ "$subc" == "l" ];then
			vim $GENOMES/$SELECTED_GENOME/LinkMap
		fi
	elif [ "$c" == "r" ];then
		uninstall=`echo $subca | sed 's/^.*\(.\)$/\1/'`
		if [ "$subc" == "i" ];then
			list_genes
			if [ "$3" == "" ];then
				read -p "Item to remove?: " a
			else
				a=$3
			fi
			while read -r b; do
				if [ "$(echo $b | sed 's/\;.$//')" == "$a" ];then
					rm -rf $GENOMES/$SELECTED_GENOME/$b
					if [ "$uninstall" == "y" ];then
					       sudo pacman -Rns --noconfirm $a
				       	fi	       
					remove_link $b
				fi
			done <<< $(list_genes)
		elif [ "$subc" == "d" ];then
			uninstall=`echo $subca | sed 's/^.*\(.\)$/\1/'`
			if [ "$3" == "" ];then
				list_genes
				read -p "Item to remove dep from?: " a
				item=`grab_full_gene $a`	
			else
				item=`grab_full_gene $3`

			fi
			if [ -f $GENOMES/$SELECTED_GENOME/$item/DepMap ];then
				while read -r b;do
					printf "$( echo $b | sed 's/\(.*\)\;[apn]$/\1/')"'\n'
				done <<< $( cat $GENOMES/$SELECTED_GENOME/$item/DepMap )
			fi
			read -p "Dep to remove?: " a
			sed -i '/'"$a"'/d' $GENOMES/$SELECTED_GENOME/$item/DepMap
			if ! grep -q '[^[:space:]]' < $GENOMES/$SELECTED_GENOME/$item/DepMap;then
				rm $GENOMES/$SELECTED_GENOME/$item/DepMap
			fi
		fi
	elif [ "$c" == "l" ];then
		if [ ! "$subc" == "b" ];then
			if [ "$subc" == "r" ];then
				if [ "$3" == "" ];then
					cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "*" 
					read -p "Item to link to Root?: " a
					item=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o "*$a;[apn].*" | sed 's/*//g'`
				else
					item=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o "*$3;[apn].*" | sed 's/*//g'`
				fi
				chain="R"
				newchain=`echo $chain::$item`
			else
				if [ "$3" == "" ];then
					cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -v "*" 
					read -p "Chain to link item to (last item in the chain)?: " a
					chain=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o ".*$a;[apn]\$" | head -n 1`
				else
					chain=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o ".*$3;[apn]\$" | head -n 1`
				fi
				echo "$chain"

				if [ "$4" == "" ];then
					cat $GENOMES/$SELECTED_GENOME/LinkMap 
					read -p "Item to link?: " a
					item=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "$a" | sed 's/^*//g;s/.*::\(.*\;[apn]\)$/\1/g' | head -n 1`
				else
					item=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "$(grab_full_gene $4)" | sed 's/^*//g;s/.*::\(.*\;[apn]\)$/\1/g' | head -n 1`
				fi
				echo "$item has been set"
			fi
			if [ ! "$(echo "$item" | wc -l )" == "1" ];then
				echo $item is not 1!!!
			else
				if [ "$(echo "$chain")" == "1" ];then
					newchain=`echo $chain::$item`
					remove_orphaned_gene_link $item
					echo $newchain >> $GENOMES/$SELECTED_GENOME/LinkMap
				else
					while read -r a; do
						newchain=`echo $a::$item`
						echo $newchain >> $GENOMES/$SELECTED_GENOME/LinkMap
					done <<<$(echo "$chain")
					remove_orphaned_gene_link $item
				fi
			fi
			sort $GENOMES/$SELECTED_GENOME/LinkMap >> $GENOMES/$SELECTED_GENOME/LinkMapTMP
			rm $GENOMES/$SELECTED_GENOME/LinkMap
			cp $GENOMES/$SELECTED_GENOME/LinkMapTMP $GENOMES/$SELECTED_GENOME/LinkMap
			rm $GENOMES/$SELECTED_GENOME/LinkMapTMP
		else
			if [ "$3" == "" ];then
				cat $GENOMES/$SELECTED_GENOME/LinkMap 
				read -p "Item to break at (Between it and it's parent)?: " a
				breakpoint=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o ".*$a;[apn].*"`
			else
				breakpoint=`cat $GENOMES/$SELECTED_GENOME/LinkMap | grep -o ".*$3;[apn].*"`
				echo "$breakpoint"
			fi
			while read -r b;do
				sed -i '/'$b'/d' $GENOMES/$SELECTED_GENOME/LinkMap 
				echo $b | sed 's/^.*\('$3'\;[apn].*\)/*\1/' >> $GENOMES/$SELECTED_GENOME/LinkMap 
			done <<< $( echo "$breakpoint" )
			cp $GENOMES/$SELECTED_GENOME/LinkMap $GENOMES/$SELECTED_GENOME/LinkMapTmp
			rm -rf $GENOMES/$SELECTED_GENOME/LinkMap 
			cat $GENOMES/$SELECTED_GENOME/LinkMapTmp | uniq > $GENOMES/$SELECTED_GENOME/LinkMap
		fi
	fi
}

#Locks are the root of any chain (either A or R) and this function simply removes them (based on $1)
release_locks(){
	sed -i "s/^"$2"::\(.*\)$/\1/" $1
}

#check if a given chain at $1 has a parent at $2
has_parent(){
	[ "$(echo $1 | sed 's/^\(.\+\)'$2'.*$/\1/;s/^'$2'.*//')" == "" ] && echo false || echo true
}

#Check all chains set by $2 to see if they have parents. If all of them dont, echo true otherwise echo false
check_chains(){
	to_process="true"
	while read -r a;do
		if [ "$(has_parent $a $2)" == "true" ];then
			to_process="false"
		fi
	done <<< $(cat $1 | grep $2)
	echo $to_process
}

#Checks if a given chain set by $1 has no parents or childs
lone_chain(){
	[ "$(echo $1 | awk 'BEGIN { FS="::" } { print NF }')" == "1" ] && echo true || echo false
}

#removes any instance of $2 in the chain from the chain and deletes chains whichs only contains $2
update_linkmap(){
	sed -i 's/^'$2'::\(.*\)/\1/;/^'$2'$/d' $1
	sed -i '/[[:space:]].*/d' $1
}

#gets the manager part of a full item name
get_item_m(){
	echo "$1" | awk 'BEGIN { FS=";" } { print $2 }'
}

#gets the name part of a full item name
get_item_n(){
	echo "$1" | awk 'BEGIN { FS=";" } { print $1 }'
}

#checks wether a given item has Init functions in it's ExecMap
em_has_ic(){
	if [ "$(cat $1/ExecMap | grep -e "^i;")" == "" ];then
		echo false
	else
		echo true
	fi
}

#Installs an item, used primarily in incubation
install(){
	p="$(get_item_n "$1")"
	manager="$(get_item_m "$1")"
	echo INSTALLING $p USING $manager
	if [ "$manager" == "a" ];then
		$AUR_MANAGER --sudo-autorepeat-at-runtime --noconfirm -S $p
	elif [ "$manager" == "p" ];then
		sudo pacman --noconfirm -S $p
	fi
}

#exact same as parse_relpath but replaces USER with running user
parse_ug(){
	echo "$1" | sed 's/USER/'`whoami`'/g'
}

#exact same as parse_relpath
parse_dst(){
	echo "$1" | sed 's,~,'$HOME','
}

#moves a files from a FileMap entry with the proper ownership and permissions
move_file(){
	UG="$(echo $2 | awk 'BEGIN { FS=";" } { print $1 }')"
	PERMS="$(echo $2 | awk 'BEGIN { FS=";" } { print $2 }')"
	FNDEST="$(echo $2 | awk 'BEGIN { FS=";" } { print $3 }')"
	FN="$(echo $FNDEST | awk 'BEGIN { FS="->" } { print $1 }')"
	DEST="$(echo $FNDEST | awk 'BEGIN { FS="->" } { print $2 }')"
	echo MOVING $FN from $1/Files/ to $DEST using User and group `parse_ug $UG` and with perms $PERMS
	[ ! -d "`parse_dst "$DEST"`" ] && mkdir -p `parse_dst "$DEST"` 
	sudo mv $1/Files/$FN `parse_dst "$DEST"`
	sudo chown `parse_ug $UG` `parse_dst "$DEST"`/$FN
	sudo chmod "$PERMS" `parse_dst "$DEST"`/$FN
}

#calls install on every DepMap lines
depgrow(){
	while read -r a;do
		install $a
	done <<< $(cat $1/DepMap)
}

#calls move_file on every FileMap lines
filegrow(){
	while read -r a;do
		move_file $1 $a
	done <<< $(cat $1/FileMap)
}

#gets every lines starting with $2; and puts the remainder in a predefined script name
#Then executes the script
comgrow(){
	[ "$2" == "p" ] && n="Pre"
	[ "$2" == "i" ] && n="Init"
	[ "$2" == "P" ] && n="Post"
	while read -r a;do
		[ ! "$a" == "" ] && echo "$a" | sed 's/^[ipP]\;//g;s,~,'$HOME',g' >> $1/ExecMap_$n
	done <<< $(cat $1/ExecMap | grep -e "^$2;")
	[ -f "$1/ExecMap_$n" ] && sudo chmod +x $1/ExecMap_$n && /bin/sh $1/ExecMap_$n
}

#Process each genes in the genomes which entails:
#PROCESS EXEC_PRE (IF EXISTING)
#PROCESS DEPS (IF EXISTING)
#INSTALL ITEM/PROCESS EXEC_INIT if exsisting
#PROCESS FILES (IF EXISTING)
#PROCESS EXEC_POST (IF EXISTING)
process_gene(){
	ipath=`echo $1 | sed 's/LinkMap//'`
	echo -e $EC_RED PROCESSING $2 $EC_NC
	EM_PRE="false"
	EM_INIT="false"
	EM_POST="false"
	DM_PROCESSED="false"
	FM_PROCESSED="false"
	INSTALLED="false"
	#PROCESS EXEC_PRE (IF EXISTING)
	#PROCESS DEPS (IF EXISTING)
	#INSTALL ITEM/PROCESS EXEC_INIT if exsisting
	#PROCESS FILES (IF EXISTING)
	#PROCESS EXEC_POST (IF EXISTING)

	if [ -f "$ipath$2/ExecMap" ];then
		echo -e $EC_YELLOW EXECUTTING COMMANDS $EC_NC
		comgrow "$ipath$2" "p"
		EM_PRE="true"
	elif [ -f "$ipath$2/DepMap" ];then
		echo -e $EC_YELLOW INSTALLING DEPENDENCIES $EC_NC
		depgrow "$ipath$2"
		DM_PROCESSED="true"
	else
		if [ ! "$(get_item_m "$2")" == "n" ]; then
			echo -e $EC_BLUE PRECONFIGURATION DONE, INSTALLING $2 $EC_NC
			install $2
		elif [ -f "$ipath$2/ExecMap" ] && [ "$(em_has_ic "$ipath$2")" == "true" ];then
			echo -e PRECONFIGURATION DONE, INSTALLING $2
			comgrow "$ipath$2" "i"
		else
			echo -e $EC_BLUE PRECONFIGURATION DONE, AND NO NEED TO INSTALL `get_item_n $2` $EC_NC
		fi
		INSTALLED="true"
	fi

	if [ -f "$ipath$2/DepMap" ] && [ ! "$DM_PROCESSED" == "true" ] ;then
		echo -e $EC_YELLOW INSTALLING DEPENDENCIES $EC_NC
		depgrow "$ipath$2"
		DM_PROCESSED="true"
	fi

	if [ ! "$(get_item_m "$2")" == "n" ] && [ "$INSTALLED" == "false" ]; then
		echo -e $EC_BLUE PRECONFIGURATION DONE, INSTALLING `get_item_n "$2"` $EC_NC
		install $2
	elif [ -f "$ipath$2/ExecMap" ] && [ "$(em_has_ic "$ipath$2")" == "true" ] && [ "$INSTALLED" == "false" ];then
		echo -e $EC_BLUE PRECONFIGURATION DONE, INSTALLING `get_item_n "$2"` $EC_NC
		comgrow "$ipath$2" "i"
	elif [ "$INSTALLED" == "false" ];then
		echo -e $EC_BLUE PRECONFIGURATION DONE, AND NO NEED TO INSTALL `get_item_n $2` $EC_NC
	fi

	if [ -f "$ipath$2/FileMap" ] && [ ! "$FM_PROCESSED" == "true" ];then
		echo -e $EC_YELLOW INSTALLING FILES $EC_NC
		filegrow "$ipath$2"
		FM_PROCESSED="true"
	fi
	
	if [ -f "$ipath$2/ExecMap" ];then
		comgrow "$ipath$2" "P"
	fi
	
	echo -e $EC_GREEN PROCESSED! $EC_NC
}

#gets chains that have no parents (and therefore ready for processing)
process_chains(){
	#cat $1 | grep -v -e "^A::" -e "^R::"
	#check if there are chains to process
	while [ ! "$(cat $1 | grep -v -e "^A::" -e "^R::" | wc -l)" == "0" ];do
		#if there are, loop through them
		processed="false"
		processed_i=""
		while read -r a;do
			#if the current line is a lone chain, there are no other chains similar with a parent and nothing has been processed, process it and set processed to true
			if [ "$processed" == "false" ] && [ "$(lone_chain $a)" == "true" ] && [ "$(check_chains $1 $a)" == "true" ];then
				processed_i="$a"
				process_gene $1 $a
				processed="true"
			fi
		done <<< $(cat $1 | grep -v -e "^A::" -e "^R::")
		[ "$processed" == "true" ] && update_linkmap $1 $processed_i
	done
}

#Incubate the sealed genome (in other words, install the rice)
incubate_rice(){
	if [ "$1" == "" ];then
		echo No rice to incubate, select a written rice genome folder
	else
		if [ -d "$1" ];then
			if [ -f "$1/LinkMap" ];then
				if [ "$(check_internet)" == "true" ];then
					release_locks "$HOME/$1LinkMap" "A"
					process_chains "$HOME/$1LinkMap"
					release_locks "$HOME/$1LinkMap" "R"
					process_chains "$HOME/$1LinkMap"
				else
					echo Please connect to the internet
				fi
				#RELEASE R LOCK
				#PROCESS CHAINS
				#process_aur_chains $1
				#	sed -i 's/R::\(.*\)/\1/' "$1/LinkMap"
				#	while [ ! "$(wc -l "$1/LinkMap")" == "0" ];do
				#		rs=`check_schains $1`
				#		echo RESOLVING $rs
				#		#resolve_gene $rs
				#		update_linkmap $1 "$rs"
				#	done
			else
				echo Genome Missing LinkMap, aborting.
			fi
		fi
	fi
}

genome_status(){
	genome_status="Nil"
	
	while read -r a;do
		if [ ! "$a" == "$GENOMES/$SELECTED_GENOME" ];then
			[ -d "$a/Files" ] && [ ! -f "$a/FileMap" ] && genome_status="BROKEN"
			if [ "$genome_status" == "Nil" ];then
				if [ -f "$a/FileMap" ];then
					if [ -d "$a/Files" ];then
						genome_status="SEALED"
					else
						genome_status="UNSEALED"
					fi
				fi
			elif [ "$genome_status" == "SEALED" ];then
				if [ -f "$a/FileMap" ] && [ ! -d "$a/Files" ];then
					genome_status="BROKEN"
				elif [ ! -f "$a/FileMap" ] && [ -d "$a/Files" ];then
					genome_status="BROKEN"
				fi
			elif [ "$genome_status" == "UNSEALED" ];then
				if [ -d "$a/Files" ];then
					genome_status="BROKEN"
				fi
			fi
		fi
	done <<< $(find $GENOMES/$SELECTED_GENOME -type d)
	echo $genome_status
}

get_last_child(){
	echo $1 | sed 's/^.*::\(.*;[apn]\)$/\1/'
}

get_direct_parent(){
	echo $1 | sed 's/\([RA]::|*\)\(.*::\)*\(.*\)::'$2'$/\3/'
}

validate_chain(){
	lc=`get_last_child $1`
	dp=`get_direct_parent $1 $lc`
	if [ "$(cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "$dp::$lc$" | wc -l )" == "1" ] || [ "$(cat $GENOMES/$SELECTED_GENOME/LinkMap | grep "$dp::$lc$" | wc -l )" == "0" ];then
		echo VALID
	else
		echo BROKEN
	fi
}

validate_linkmap(){
	linkmap_status="Nil"
	if [ -f $GENOMES/$SELECTED_GENOME/LinkMap ];then
		while read -r a;do
			#if not broken and is unlinked (starting with *) then set it as UNLINKED
			[ ! "$linkmap_status" == "BROKEN" ] && [ ! "$(echo $a | grep -o "^*" )" == "" ] && linkmap_status="UNLINKED"
			#checks if A links do not require a managers otherwise it sets it to BROKEN
			[ ! "$(echo $a | grep -o "^A::" )" == "" ] && [ ! "$(echo $a | grep -o ";a:*" )" == "" ] && linkmap_status="BROKEN"
			if [ ! "$linkmap_status" == "BROKEN" ];then
				linkmap_status=`validate_chain "$a"`
			fi
		done <<< $(cat $GENOMES/$SELECTED_GENOME/LinkMap)
	fi
	[ "$linkmap_status" == "Nil" ] && echo VALID || echo $linkmap_status
}

validate_seal(){
	seal_status="Nil"
	while read -r a;do
		f="$(echo $a | sed 's,^\(.*\)/.*$,\1,g')"
		while read -r b;do
			ftc="$(echo $b | awk 'BEGIN { FS=";" } { print $3 }' | awk 'BEGIN { FS="->" } { print $1 }')"
			[ ! -f "$f/Files/$ftc" ] && [ ! -d "$f/Files/$ftc" ] && seal_status="BROKEN"
		done <<< $(cat "$a")
	done <<< $(find $GENOMES/$SELECTED_GENOME -iname FileMap)
	[ "$seal_status" == "Nil" ] && echo VALID || echo $seal_status
}

validate_genome(){
	#CODES:
	#BB: Beyond Broken (broken at status)

	#LS: Linkmap Sealed (Linkmap is broken)
	#LU: Linkmap Unsealed (Linkmap is broken
	
	#US: Linkmap Sealed (Linkmap is broken)
	#UU: Linkmap Unsealed (Linkmap is broken

	#BS: Broken Seal
	#VS: Valid Seal

	#VU: Valid Unsealed

	#BU: Broken Unsealed (not in use atm)
	if [ ! "$1" == "-" ];then
		old_genome=$SELECTED_GENOME
		select_genome $1 $0
	fi
	s=`genome_status` #BB,<X>S,<X>U
	if [ ! "$s" == "BROKEN" ];then
		lms=`validate_linkmap` #!BB,LS,LU,<X>S,<X>U
		[ "$lms" == "BROKEN" ] && [ "$s" == "SEALED" ] && echo LS
		[ "$lms" == "BROKEN" ] && [ "$s" == "UNSEALED" ] && echo LU
		[ "$lms" == "UNLINKED" ] && [ "$s" == "SEALED" ] && echo US
		[ "$lms" == "UNLINKED" ] && [ "$s" == "UNSEALED" ] && echo UU

		if [ "$lms" == "VALID" ] && [ "$s" == "SEALED" ];then
			ss=`validate_seal`
			[ "$ss" == "VALID" ] && echo VS || echo BS
		elif [ "$lms" == "VALID" ] && [ "$s" == "UNSEALED" ];then
			echo VU
		fi
	else
		echo BB
	fi
	if [ ! "$1" == "-" ];then
		[ ! "$old_genome" == "" ] && select_genome $old_genome $0 || select_genome "NONE" $0
	fi
}

unseal_genome(){
	if [ "$1" == "-" ];then
		while read -r a;do
			echo $a
			sudo rm -rf $a
		done <<< $(find $GENOMES/$SELECTED_GENOME/ -iname Files)
	else
		old_genome=$SELECTED_GENOME
		select_genome $1 $2
		while read -r a;do
			sudo rm -rf $a
		done <<< $(find $GENOMES/$SELECTED_GENOME/ -iname Files)
		select_genome $old_genome $2
	fi
}

#1: genome to export
#2: export directory
export_genome(){
	if [ "$2" == "" ];then
		if [ "$1" == "" ];then
			sudo cp -pr $GENOMES/$SELECTED_GENOME "$HOME"
			echo -n Exported $SELECTED_GENOME
		elif [ ! "$1" == "" ];then
			[ -d "$GENOMES/$1" ] && sudo cp -r $GENOMES/$1 "$HOME"
			echo -n Exported $1
		fi
		echo " "to home.
	else
		if [ "$1" == "" ];then
			sudo cp -pr $GENOMES/$SELECTED_GENOME "$2"
			echo -n Exported $SELECTED_GENOME
		elif [ ! "$1" == "" ];then
			[ -d "$GENOMES/$1" ] sudo cp -r $GENOMES/$1 "$2"
			echo -n Exported $1
		fi
		echo " "to $2.
	fi 
}

#Function to parse the arguments given
parseArgs(){
	if [ "$1" == "new" ];then
		[ "$2" == "" ] && create_new_genome "-" $0 || create_new_genome $2 $0
	elif [ "$1" == "select" ];then
		[ "$2" == "" ] && select_genome "-" $0 || select_genome $2 $0
	elif [ "$1" == "unselect" ];then
		select_genome "NONE" $0
	elif [ "$1" == "print" ];then
		print_genome
	elif [ "$1" == "clone" ];then
		[ ! "$SELECTED_GENOME" == "" ] && echo $SELECTED_GENOME is selected && clone_genome $2 || echo Cannot clone if you have not selected any genomes.
	elif [ "$1" == "delete" ];then
		[ "$2" == "" ] && delete_genome "-" $0 || delete_genome $2 $0
	elif [ "$1" == "info" ];then
		if [ ! "$SELECTED_GENOME" == "" ];then
			if [ ! "$2" == "" ];then
				list_genes $2  $3
			else
				list_genes m
			fi
		else
			echo You haven\'t selected any genomes.
		fi
	elif [ "$1" == "setaur" ];then
		set_aur $2
	elif [ "$1" == "seal" ];then
		if [ "$2" == "" ];then 
			seal_genome "-" $0 
		else
			seal_genome $2 $0
		fi
	elif [ "$1" == "unseal" ];then
		[ "$2" == "" ] && unseal_genome "-" $0 || unseal_genome $2 $0
	elif [ "$1" == "export" ];then
		#TODO: Make $3 to $2 if $2 is empty
		if [ ! "$SELECTED_GENOME" == "" ] && [ "$2" == "" ];then
			export_genome 
		elif [ "$SELECTED_GENOME" == "" ] && [ ! "$2" == "" ];then
			[ "$3" == "" ] && export_genome $2 || export_genome $2 $3
		else
			echo No genomes to export and no currently selected genomes.
		fi
		#[ "$2" == "" ] && export_genome "-" $0 || unseal_genome $2 $0
	elif [ "$1" == "validate" ];then
		[ "$2" == "" ] && validate_genome "-" $0 || validate_genome $2 $0
	elif [ "$1" == "incubate" ];then
		incubate_rice $2
	else
		c=`echo $1 | sed 's/^\([aerl]\).*$/\1/'`
		if [ "$c" == "a" ] || [ "$c" == "e" ] || [ "$c" == "r" ] || [ "$c" == "l" ];then
			ca=`echo $1 | sed 's/^[aerl]\(.*\)$/\1/'`
			if [ ! "$ca" == "" ];then
				parse_rice_command $c $ca "$([ "$2" == "" ] && echo $0 || echo $2)" $3 $4 $5
			else
				parse_rice_command $c "-" "$([ "$2" == "" ] && echo $0 || echo $2)" $3 $4 $5
			fi
		else
			echo $1 is not a valid command.
		fi
	fi
}

parseArgs $@
